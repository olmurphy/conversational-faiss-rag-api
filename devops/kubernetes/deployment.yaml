apiVersion: apps/v1
kind: Deployment
metadata:
  name: local-app-dep
  namespace: default # Or your preferred local namespace
  labels:
    app: local-app
    deployment: local-dev
    region: local-region
spec:
  replicas: 1
  selector:
    matchLabels:
      app: local-app
      cogccaresoln: local-cogccaresoln
      deployment: local-dev
      region: local-region
  template:
    metadata:
      labels:
        app: local-app
        cogccaresoln: local-cogccaresoln
        deployment: local-dev
        region: local-region
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "3021"
        prometheus.io/scrape: "true"
    spec:
      containers:
        - name: local-app
          image: your-local-image:latest # Replace with your local image
          ports:
            - containerPort: 8000
              protocol: TCP
          env:
            # Add other environment variables as needed
            - name: OPENAI_BASE_URL
              valueFrom:
                secretKeyRef:
                  name: kroger-gen-ai
                  key: OPENAI_BASE_URL
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: kroger-gen-ai
                  key: OPENAI_API_KEY
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: LOG_LEVEL
            - name: SERVICE_NAME
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: SERVICE_NAME
            - name: CONFIGURATION_PATH
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: CONFIGURATION_PATH
            - name: SAMPLE_DATA_PATH
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: SAMPLE_DATA_PATH
            - name: REDIS_CERT_PATH
              value: /etc/redis-secret/REDIS_CERT_BASE64 # the mount 
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: REDIS_URL
            - name: PG_HOST
              valueFrom:
                secretKeyRef:
                  name: pg
                  key: PG_HOST
            - name: PG_PORT
              valueFrom:
                secretKeyRef:
                  name: pg
                  key: PG_PORT
            - name: PG_USER
              valueFrom:
                secretKeyRef:
                  name: pg
                  key: PG_USER
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pg
                  key: PG_PASSWORD
            - name: PG_DB
              valueFrom:
                secretKeyRef:
                  name: pg
                  key: PG_DB
            - name: PG_CERT_BASE64
              value: /etc/pg-secret/PG_CERT_BASE64
          volumeMounts:
            - name: redis-cert-volume
              mountPath: /etc/redis-secret
              readOnly: true
            - name: pg-cert-volume
              mountPath: /etc/pg-secret
              readOnly: true
          readinessProbe:
            httpGet:
              path: /readiness
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /liveness
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 3
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent # For local images
      volumes:
        - name: redis-cert-volume
          secret:
            secretName: redis # ensure that secret redis exists.
        - name: pg-cert-volume
          secret:
            secretName: pg # ensure that secret pg exists.
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 2 # or whatever number is appropriate for local development.
  progressDeadlineSeconds: 600